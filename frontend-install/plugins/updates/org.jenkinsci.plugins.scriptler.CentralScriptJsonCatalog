{"list": [{"authors": [{"name": "EJ Ciramella"}], "comment": "This script will warn the user if any jobs have dependencies on other jobs and the trigger flow is a loop.", "core": "1.300", "name": "Warn if looped triggers", "parameters": [], "script": "warn-if-looped-triggers.groovy"}, {"authors": [{"name": "EJ Ciramella"}], "comment": "This script came about because there were many jobs that were both scheduled to run @midnight AND were polling the scm truth server.  Doing one or the other makes sense, but having polling AND @midnight doesn't.  This script will iterate over all the projects and pull out the timer based trigger as well as set the minute interval for how often it should poll.  Initially, I used this to move from a really slopply written polling interval string to */5 (run every 5 minutes).", "core": "1.300", "name": "Trigger Manipulator", "parameters": [], "script": "trigger-manipulator.groovy"}, {"authors": [{"name": "Andrew Bayer"}], "comment": "Runs the log rotator for each job, purging old builds if needed.", "core": "1.409", "name": "Purge Old Builds", "parameters": [], "script": "purgeOldBuilds.groovy"}, {"authors": [{"email": "Andrei.Pozolotin@gmail.com", "name": "Andrei Pozolotin"}], "comment": "returns reverse sorted git tag list, assuming X.Y.Z version format in the tag; for use with https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Dynamic+Parameter+Plug-in", "core": "1.450", "name": "Barchart : Git Tag List", "parameters": ["paramTag"], "script": "barchartGitTagList.groovy"}, {"authors": [{"name": "Niels Harremoes"}], "comment": "If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all", "core": "1.300", "name": "Clear build queue", "parameters": [], "script": "clearBuildQueue.groovy"}, {"authors": [{"name": "Andrew Bayer"}], "comment": "Find all jobs with names matching the given pattern and either disables or enables them, depending on the flag.", "core": "1.409", "name": "Disable/Enable Jobs Matching Pattern", "parameters": ["jobPattern", "disableOrEnable"], "script": "disableEnableJobsMatchingPattern.groovy"}, {"authors": [{"name": "EJ Ciramella"}], "comment": "This script will go through all workspaces for any/all jobs and remove them.", "core": "1.300", "name": "Workspace Cleaner", "parameters": [], "script": "workspace-cleaner.groovy"}, {"authors": [{"name": "Julien Carsique"}], "comment": "Activate the <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/JIRA+Plugin\">Jira plugin</a> publisher", "core": "1.424", "name": "Jira issue update publisher", "parameters": ["dryRun", "jobs", "jobsPattern"], "script": "jira-publisher.groovy"}, {"authors": [{"name": "Andrew Bayer"}], "comment": "For a given job and a given range of possible build numbers, delete those builds.", "core": "1.409", "name": "Bulk Delete Builds", "parameters": ["jobName", "buildRange"], "script": "bulkDeleteBuilds.groovy"}, {"authors": [{"name": "EJ Ciramella"}], "comment": "This script will make sure ALL of your maven jobs are triggered by builds on any snapshot dependencies.  There is a basic example of how to exclude jobs by name in the top of this script.", "core": "1.300", "name": "Trigger via Snapshot", "parameters": [], "script": "trigger-via-snapshot-deps.groovy"}, {"authors": [{"name": "Eric Dalquist"}], "comment": "Update Email Recipients for multiple jobs/views", "core": "1.409", "name": "Update Email Recipients", "parameters": ["views", "jobs", "recipients"], "script": "updateEmailAddress.groovy"}, {"authors": [{"name": "Gareth Bowles"}], "comment": "Disable jobs that haven't had a successful build for at least 90 days.", "core": "1.409", "name": "Disable Broken Jobs", "script": "disableBrokenJobs.groovy"}, {"authors": [{"name": "EJ Ciramella"}], "comment": "This script was written to create NEW jobs based on a series of other jobs and append a version string to the name of the job.  For instance, if you have foo, bar, bat jobs AND they've all been branched to support 2.0 work, you can feed this script the name and the version you'd like to create the jobs for.  This will create the new jobs with the proper name and will make sure the Mercurial scm configuration is pointed at that new branch.", "core": "1.300", "name": "Clone Branches", "parameters": [], "script": "clonebranches.groovy"}, {"authors": [{"name": "Eric Dalquist"}], "comment": "Add jabber notifications to the specified jobs", "core": "1.409", "name": "Add Jabber Notification", "parameters": ["views", "jobs", "targets", "strategy", "notifyOnBuildStart", "notifySCMCommitters", "notifySCMCulprits", "notifyUpstreamCommitters", "notifySCMFixers"], "script": "addJabberNotification.groovy"}, {"authors": [{"name": "Vincent Dupain"}], "comment": "This script will go through all workspaces for all jobs and wipe them.", "core": "1.499", "name": "Wipeout Workspace", "parameters": ["dryRun"], "script": "wipeout-workspace.groovy"}, {"authors": [{"name": "Giacomo Boccardo"}], "comment": "If for any reason (e.g., an incorrect global configuration) many builds of many jobs fail, you'd have to spend a lot of time cleaning them. This plugin removes, for each job, all the builds to the last successful and resets the number of the next build properly (lastSuccessful+1). It seems to work also for multi-configuration multi-module maven projects. It's possible to conduct a dry run test using a parameter (default true) you could never guess;)", "name": "Maven Multi-module Jobs Disaster Recovery", "parameters": ["dryRun"], "script": "jMavenMultiModuleJobsDisasterRecovery.groovy"}, {"authors": [{"name": "Mestachs"}, {"name": "Dominik Bartholdi"}], "comment": "This script disables artifact archiving for maven projects, if you use an enterprise repository this rarely usefull.", "core": "1.350", "name": "Disable Maven Artifact Archiving", "parameters": ["dryRun"], "script": "disableAutomaticMavenArchiving.groovy"}, {"authors": [{"name": "Giacomo Boccardo"}], "comment": "Removes all the builds (modules included) of a given Maven Multi-module Project job ('jobName') and resets the number of the next build to 'newNextBuildNumber' (default 1). It's possible to conduct a dry run test using a parameter (default true) you could never guess ;)", "name": "Maven Multi-Module Project Batch Builds Remover", "parameters": ["jobName", "newNextBuildNumber", "dryRun"], "script": "jMavenMultiModuleProjectBuildsCleaner.groovy"}, {"authors": [{"name": "Mestachs"}, {"name": "Dominik Bartholdi"}], "comment": "Changes the config of the builds to disgard old builds (only if no log rotation is configured).", "core": "1.350", "name": "Disgard old builds", "parameters": ["dryRun", "daysToKeep", "numToKeep", "artifactDaysToKeep", "artifactNumToKeep"], "script": "discardOldBuilds.groovy"}, {"authors": [{"name": "ITO Hayato"}], "comment": "put disk usage info and check used percentage.", "core": "1.300", "name": "Check Disk Usage", "parameters": ["root", "threshold"], "script": "checkDiskUsage.groovy"}, {"authors": [{"name": "Daniel PETISME <danielpetisme> <daniel.petisme@gmail.com>"}], "comment": "Export the permissions defined in the <a href='https://wiki.jenkins-ci.org/display/JENKINS/Role+Strategy+Plugin'>role-strategy plugin</a> in a CSV format. <br />Further information in the ticket <a href='https://issues.jenkins-ci.org/browse/JENKINS-8075'>JENKINS-8075</a>", "core": "1.424.2", "name": "Export role-strategy permissions to CSV", "parameters": [], "script": "export-role-strategy-permissions-to-csv.groovy"}, {"authors": [{"name": "EJ Ciramella"}], "comment": "This script came about because there were many jobs that were disabled and interlaced between active jobs in the hundreds.  If you don't want to set up a new view that lists out just the disabled (or never run) jobs, this is a quick fix that will provide counts at the end of the run.", "core": "1.300", "name": "List Disabled Jobs", "parameters": [], "script": "listdisabledjobs.groovy"}, {"authors": [{"name": "Gareth Bowles"}], "comment": "Find offline slaves with a given name prefix.", "core": "1.409", "name": "Find Offline Slaves", "parameters": ["namePrefix"], "script": "findOfflineSlaves.groovy"}], "signature": {"certificates": ["MIIDUzCCAjsCBQDerb7zMA0GCSqGSIb3DQEBBAUAMIGKMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTERMA8GA1UEBxMIU2FuIEpvc2UxGDAWBgNVBAoTD0plbmtpbnMgUHJvamVjdDEaMBgGA1UEAxMRS29oc3VrZSBLYXdhZ3VjaGkxHTAbBgkqhkiG9w0BCQEWDmtrQGtvaHN1a2Uub3JnMB4XDTEzMDIyNjE5MjEyOVoXDTE0MDIyNjE5MjEyOVowUDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExEDAOBgNVBAoTB0plbmtpbnMxGjAYBgNVBAMTEUtvaHN1a2UgS2F3YWd1Y2hpMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1EO7jf2UL8h74uVDja9ggJln1ogDz6mheEku3UyGizP7MUYJ2WNZO87f/DE3Hu4DTndhMgq7vdxIDFWNYrxB+G/X2Epc0p7vC8dkXTLpVtIqopy2Neyb/idasavrUVMjGvctwzdvLH+8nS3KRCaINzn+ii/syZSkEtKDXILI7vS3X83HJjLvEKt5TYbXHbD5HEVqR8hosr2vfcVwUf6asTNBkfGjGWDcC4ufVYPP36ZEy8IQRlToBCHTuAEbx/x05X2i3a9qSeQX7Dg5OwN1R1djmw2CGvrJBMtTz77S79/03yP5w/TsLf05aciOWgG3dZW6FK7Dzcio4kehiHznBQIDAQABMA0GCSqGSIb3DQEBBAUAA4IBAQAUEBz6dfGVE1xTgHYW6V6y0DUuOzwXvCl4CgHja6NPuv1h0xekF0k0P2SG/aPYpXUXsrxbhBsUyAwe3YUJq/YNkd+dfDaoOfI1f4vG6J6rYDiuKD8NWTc0AGSR1zHqo12e0JzCHM1r9nBkUqYn+KfAD6RfUYHJRORjZhZfshJ1TMjLk6jJNiHsbdP6gSqD7YZ7DyWofgOqeplpYnkPqRC7ix+PJp1TVgHRZ1QnqNsXP9TOvxd7OwIcYL9qcu6i0v8sV+oJsh8EvNgSlzQDmuVqQRNvO7hBdsVa3E+8onFZ3mB8KzB+7gYFbAO1lu8891HydyGZ4BgupPIPSAfX6C/X"], "correct_digest": "dK8cBkVQeep44NUYwutrJmhE25g=", "correct_signature": "nnVtl1EOESGwOKdEMtB2a2mFJMEKFNlBP2k8/N9qK+hc8u6/z+TM414h9oY8ODpxOwoHA+Qx1PTV1pJP8NkcWKaWXjwJ+py/GEKcAyocaO7N7n5pntM+/dacK7SgGLIcbYGbllIbp3sh0lVbq2aIO2WnK1cAuzMyL9KbrofhvHyLTUJG7V15CF9ar9eXq6ZiNUavdPEDxuXXLc+lllh4+Wid31Wfyr6euDLY31bAYpxcLjseUBoO/Hbp3fCquqS0MjKe63icg/u+b1THwcw+Wnmmmd97m2kEH3RCv3Luym24z0y3OlzjcI0P4cLuUo8jY0OOer4CBuM0rYSAdmtA7g==", "digest": "2jmj7l5rSw0yVb/vlWAYkK/YBwk=", "signature": "fpRYdfEUGcr23j0VVWcm2kqw3u6xqCDh2unWCfPko9uOn6iul6upzgabhwsWPvNE6H0aDhzi4MnTvB4lXWKEapCD5LOB7/BnoWZyad1lUYvPIwnp8wF6p5FexfZjtkQ6nzQ6PDPOYlkk2XbmAbs6BjbNim0LP0I0mtCfLFxGJ/dlabOzNLgznQ3Na4Kjakhj5aRAm+LnZCUkOSRVXNgvlRHVouwaLOegrsB+2GsToiMP+NEm5e+GHC6VdGaFMtVQn1ijDTtV5bPLJ0nEpiDela76JmaNkalEc+uMvy3udp9GuG3aBtYFPZcoOrCGZvHtfAtAfWdMD4CTaiCufzflYA=="}}