<!--
 Copyright (c) 2011-2013, Intel Mobile Communications GmbH
 
 
 This file is part of the Inheritance plug-in for Jenkins.
 
 The Inheritance plug-in is free software: you can redistribute it
 and/or modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation in version 3
 of the License
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this library.  If not, see <http://www.gnu.org/licenses/>.
-->

<!--
  Job Creation Hetero-list entry
-->
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:f="/lib/form">
	<f:section title="Select compatible projects">
		<f:description>
			This section is used to define how this project relates to others
			to form new, transient child-projects that combine the properties
			of this project with another one to generate a runnable project.
		</f:description>
		<f:advanced align="left" title="Expand properties">
			<!-- First, the selection of the creation class for this project -->
			<f:entry title="${%Creation Class}" field="creationClass">
				<f:select default=""/> <!-- Default to no creation -->
				<f:description>
					Select the creation class to let Jenkins automatically produce
					transient projects from two or more project definitions. The
					list of available classes can be managed in the
					"Project Creation Engine" section of Jenkins' management page.
				</f:description>
			</f:entry>
			
			<!-- And then, the list of projects to mate with -->
			<f:entry>
				<f:block>
					<!-- This call fetches all suitable descriptors -->
					<j:invokeStatic var="pDescriptors"
						method="all"
						className="hudson.plugins.project_inheritance.projects.references.AbstractProjectReference"
					>
						<j:arg
							type="java.lang.String"
							value="(Simple|Parameterized)ProjectReference"
						/>
					</j:invokeStatic>
					<!-- This list displays/configures the configured parent references -->
					<f:hetero-list name="compatibleProjects" hasHeader="true"
						descriptors="${pDescriptors}"
						items="${it.compatibleProjects}"
						addCaption="${%Add compatible project}"
					/>
				</f:block>
			</f:entry>
		</f:advanced>
	</f:section>
</j:jelly>
