IMPORTANT: This image is still work-in-progress and has not been tested
thoroughly. Please use the official Fuego repository
(https://bitbucket.org/tbird20d/fuego) and the instructions from
http://fuegotest.org/wiki/FrontPage for running Fuego. Do not use this image
until this message is removed.

## Fuego

Fuego Test Framework Docker Image

### Running

All fuego files from a given session will be stored into a special
directory in the container (`/var/fuego_home`) that may be mapped into a
volume or bind-mounted into a directory on the host, for persistence.

Nothing prevents you from running fuego without mapping `/var/fuego_home`
to your host, however, by doing that, if the container is removed, all
your temporary files, logs, tests results will be lost.

#### Standalone

For running fuego without persistence (not recommended), simply run the image
with the following arguments:

```
docker run -it \
    -p 8080:8080 \
    fuegotest/fuego:latest
```

If you're behind an http_proxy, please also provide the proper
environment variables.

```
docker run -it \
    -p 8080:8080 \
    -e http_proxy=${http_proxy} \
    -e https_proxy=${https_proxy:-$http_proxy} \
    fuegotest/fuego:latest
```

Depending on the tests that you're planning to execute, some specific
mount-points or environment variables may be needed. If that's your case,
simply pass those as necessary.

For example, for using Fuego to test Fuego itself, you will need to map
your docker daemon socket as follows:


```
docker run -it \
    -p 8080:8080 \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e http_proxy=${http_proxy} \
    -e https_proxy=${https_proxy:-$http_proxy} \
    fuegotest/fuego:latest
```

#### With Persistence

For storing all the fuego files into a volume, that might be used to
recover the state of fuego in another fuego container, simply add a new
`-v` argument pointing to `/var/fuego_home` from your volume on the host,
as follows:

```
docker run -it \
    -p 8080:8080 \
    -v fuego-volume:/var/fuego_home \
    fuegotest/fuego:latest
```

Other arguments may be passed as needed (as explained in the previous
section).


For some users, it may be convenient to bind mount `/var/fuego-home` onto
the host, instead of using a volume (that's not directly accessible in
the host). For doing that, just replace the volume name in the `-v`
argument, given above, with the absolute path of your fuego directory on
host. Please also provide the uid/gid of a user that has read/write
access to that directory so that Fuego configures itself to be able to
interact with that directory.


Example with a specific uid/gid:

```
docker run -it \
    -p 8080:8080 \
    -v $(pwd)/host_fuego_home:/var/fuego_home \
    -e JENKINS_UID=1000 \
    -e JENKINS_GID=1000 \
    fuegotest/fuego:latest
```

Example with the current user's uid/gid (most cases):

```
docker run -it \
    -p 8080:8080 \
    -v $(pwd)/host_fuego_home:/var/fuego_home \
    -e JENKINS_UID=$(id -u) \
    -e JENKINS_GID=$(id -g) \
    fuegotest/fuego:latest
```

In the given mount-point (in the example $(pwd)/host_fuego_home) you will
find the following tree of directories:

```
host_fuego_home
├── fuego-core # Core Fuego Resources
├── fuego-ro # Additional Test resources
├── fuego-rw # Tests Results and Logs
└── var # Jenkins Home
    ├── lib
    │   └── jenkins
```

If any of the root directories is empty, it will be filled up
automatically by Fuego with the default data. For example, if fuego-core
is empty in the mount-point that you provided, fuego-core will be cloned
from our repos (what may take a little long).

Fuego only checks for the existence of the directories in order to
overwrite them, so please make sure you use a directory that has been
filled up (at least for the first time) with Fuego, and use our tutorials
to avoid corruption when making changes to those directories.
